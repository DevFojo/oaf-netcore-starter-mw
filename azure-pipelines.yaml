trigger:
  branches:
    include:
    - master
    - develop
  tags:
    include:
    - '*'

pr:
  - master
  - release/*
  - develop

pool:
  vmImage: "ubuntu-latest"

name: WORLD_$(Date:yyyyMMdd)$(Rev:.r)

steps:
  - task: UseDotNet@2
    displayName: Install .Net Core 5.0
    inputs:
      packageType: 'sdk'
      version: '5.0.x'

  - script: |
      VERSION_TAG=`git describe --abbrev=0 --tags 2&>/dev/null || echo 0.0.1`
      echo "##vso[task.setvariable variable=VERSION_TAG]$VERSION_TAG"
      IMAGE_TAGS=$VERSION_TAG
      if [[ "$(Build.SourceBranch)" == "refs/heads/develop" ]]; then IMAGE_TAGS="$IMAGE_TAGS,latest"; fi;
      echo Tags: $IMAGE_TAGS
      echo "##vso[task.setvariable variable=IMAGE_TAGS]$IMAGE_TAGS"
    displayName: Get git tag
  - task: Docker@2
    displayName: Login to Azure registry
    inputs:
      containerRegistry: azurecr-oaf
      command: "login"

  # - task: SonarCloudPrepare@1
  #   enabled: false
  #   continueOnError: true
  #   inputs:
  #     SonarCloud: "sonar-oaf"
  #     organization: "one-acre-fund"
  #     scannerMode: "CLI"
  #     configMode: "manual"
  #     cliProjectKey: "one-acre-fund_mw-oaf-starter"
  #     cliProjectName: "mw-oaf-starter"
  #     cliSources: "."

  # See https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli?view=azure-devops
  # TODO:
  # Capture and publish coverage
  # - task: DotNetCoreCLI@2
  #   displayName: Run and publish tests
  #   inputs:
  #     command: test
  #     projects: 'tests/**/*.csproj'
  #     arguments: '--configuration Release'
  #     publishTestResults: true

  # - task: PublishCodeCoverageResults@1
  #   condition: succeededOrFailed()
  #   continueOnError: true
  #   inputs:
  #     codeCoverageTool: Cobertura
  #     summaryFileLocation: "$(System.DefaultWorkingDirectory)/**/*coverage.xml"
  #     reportDirectory: "$(System.DefaultWorkingDirectory)/**/coverage"

  # - task: SonarCloudAnalyze@1
  #   enabled: false
  #   condition: succeededOrFailed()
  #   continueOnError: true

  # - task: SonarCloudPublish@1
  #   enabled: false
  #   condition: succeededOrFailed()
  #   continueOnError: true
  #   inputs:
  #     pollingTimeoutSec: "300"

  # This is where the magic happens
  # TODO:
  # - tweak the image names with oneacrefund/ prefix
  # - tag with a proper version
  - script: |
      echo Installing tye...
      dotnet tool install -g Microsoft.Tye --version "0.6.0-alpha.21070.5"

      echo Building images...
      tye build
      echo Done - current images:
      docker images
      echo Tagging images with ${VERSION_TAG}:
      docker tag worldconsumer:1.0.0  oaftech.azurecr.io/oneacrefund/worldconsumer:${VERSION_TAG}
      docker tag notificationapi:1.0.0   oaftech.azurecr.io/oneacrefund/notificationapi:${VERSION_TAG}
      echo Tagging images with latest:
      docker tag worldconsumer:1.0.0  oaftech.azurecr.io/oneacrefund/worldconsumer:latest
      docker tag notificationapi:1.0.0   oaftech.azurecr.io/oneacrefund/notificationapi:latest
      echo Final image list:
      docker images | grep oaftech.azurecr.io
    continueOnError: true
    displayName: "Build images"
  # Push all images!
  - task: Docker@2
    displayName: Publish worldconsumer
    # Only publish develop branch
    #condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    inputs:
      containerRegistry: azurecr-oaf
      repository: oneacrefund/worldconsumer
      # Dockerfile: containers/roster-dataset.Dockerfile
      command: push
      tags: '$(IMAGE_TAGS)'

  - task: Docker@2
    displayName: Publish notificationapi
    # Only publish develop branch
    #condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    inputs:
      containerRegistry: azurecr-oaf
      repository: oneacrefund/notificationapi
      # Dockerfile: containers/refresh.Dockerfile
      command: push
      tags: '$(IMAGE_TAGS)'

  - task: HelmInstaller@1
    inputs:
      helmVersionToInstall: latest

  - script: |
      # Lint, as sanity check
      helm lint deployment/payments
    displayName: Validate Helm chart
  - task: HelmDeploy@0
    displayName: Package Helm Chart
    inputs:
      command: package
      chartPath: $(System.DefaultWorkingDirectory)/deployment/mw-oaf-starter
      chartVersion: '$(VERSION_TAG)'
      destination: $(Build.ArtifactStagingDirectory)
      updatedependency: true

  - task: PublishBuildArtifacts@1
    displayName: Publish Helm chart
    # Only publish develop branch
    # condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    inputs:
      PathtoPublish: "$(Build.ArtifactStagingDirectory)"
      ArtifactName: "mw-oaf-starter"
      publishLocation: "Container"